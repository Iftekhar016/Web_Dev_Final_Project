import React from 'react';
import {AiOutlineInfoCircle} from 'react-icons/ai'
import Tooltip from "@material-ui/core/Tooltip";
import {useEffect, useRef, useState} from 'react'

function InputForm(props) {
	const rev = [
		'A large, not-for-profit regional medical center, including multiple hospitals, labs and clinics. Income comes from patients, medical insurance companies, and government programs like medicare.',
		'General funds given by the taxpayers of California, appropriated annualy by the state legislature. General funds are not dedicated to specific services',
		'Students pay tuition to attend the University. Non-California residents pay about twice as much as residents.  Tuition is also general funds',
		'Fees are dedicated to specific services, such as athletic facilities, bus service (UNITRANS), student organizations, the CoHo and Student Community Center, etc. ',
		'Government and industry funds given to faculty and graduate students to perform research projects. These include up to 50% overhead in addition to the cost of the research.',
		'Services other than education that people pay for, like dorms, dining, parking, etc.  At UC Davis, this also includes almost $500M of revenue generated by medical school faculty, or 8%, making this category look really big.',
		'Endowments are past gifts that were invested to provide income; interest is earned on other savings. The Museum is the direct result of a $10M gift from Jan Shrem and Maria Manetti Shrem.'

	]

	const exp = [
		'The cost of providing care at the Medical Center is roughly what we get paid to provide it.',
		'Professors, advisors, deans, the library, the computer labs, etc, including Medical School faculty salaries.',
		'The costs of doing the research, mostly researcher salaries.',
		'Student Health, things covered by fees, Admissions, and also financial aid from the general funds, which is about $100M or 1.5%.',
		'Depreciation is the loss of value of buildings and equipment as they wear out. Mostly unavoidable financial losses. ',
		'Mostly the cooperative extension, which provides agricultural services to farmers, ranchers, winemakers, etc.  Part of our mission as a land grant university, costs of providing dorms, dining,parking, etc. and Upkeep of the grounds and building, and utilities, which are less than 1%.'
	]
	const node = useRef();
	const [medRev, setMedRev] = useState(false)
	const [stateRev, setStateRev] = useState(false)
	const [tuitionRev, setTuitionRev] = useState(false)
	const [feesRev, setFeesRev] = useState(false)
	const [grantsRev, setGrantsRev] = useState(false)
	const [salesRev, setSalesRev] = useState(false)
	const [giftsRev, setGiftsRev] = useState(false)

	const [medExp, setMedExp] = useState(false)
	const [instructionExp, setInstructionExp] = useState(false)
	const [servicesExp, setServicesExp] = useState(false)
	const [deprExp, setDeprExp] = useState(false)
	const [insitutionExp, setInstiExp] = useState(false)
	const [researchExp, setResExp] = useState(false)


	useEffect(() => {
		// add when mounted
		document.addEventListener("mousedown", handleClick);
		// return function to be called when unmounted
		return () => {
		document.removeEventListener("mousedown", handleClick);
		};
	}, []);

	const handleClick = e => {
		if (node.current.contains(e.target)) {
		// inside click
		return;
		}
		// outside click 
		setMedRev(false)
		setStateRev(false)
		setTuitionRev(false)
		setFeesRev(false)
		setGiftsRev(false)
		setSalesRev(false)
		setGrantsRev(false)

		setMedExp(false)
		setInstructionExp(false)
		setServicesExp(false)
		setDeprExp(false)
		setInstiExp(false)
		setResExp(false)
	};
	//console.log("INSIDE INPUT FORM WITH " + props.data[3].name)
	function findSum(name='') {

		let sum = 0;
		props.data.forEach((element) => {
			if(element.name != name) {
				sum +=  element.value
			}
		})

		return sum;
	}

	function updateValue(e) {

		const name = e.target.name;
		let value = e.target.value;

		if (value === '') {
			value = 0
		}
		
		if (typeof value === 'string') {
			value = parseInt(value)
		}

		let sum = findSum(name);
		
		if (value + sum > 100) {
			value = 100 - sum
			document.getElementById(name).value = value
		}

		props.onChange(name, value);
	}

	if (props.data.length === 8) {
		return (
			<div >
				<div className='main-container'> 
					<h4 className='left'> Function </h4>
					<h4 className='right'> Percentage(%) </h4>
				</div> 

				<div ref={node} className='container'>
					<li className = "bp1"></li>
					<h4 className='left'> {props.data[0].name} 
					<Tooltip
						arrow
						placement='top-start'
						placement='top'
						open={medRev}
						onOpen={() => setMedRev(true)}
						onClose={() => setMedRev(false)}
						title={rev[0]}
					>
					<span></span>
					</Tooltip>
					<AiOutlineInfoCircle onClick={() => setMedRev(!medRev)}/> 
					</h4>
					<div className='input'>
					<input  name={props.data[0].name} id={props.data[0].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[0].value}/>
					</div>
				</div>

				<div  className='container'> 
					<li className = "bp2"></li>
					<h4 className='left'> {props.data[1].name} 
					<Tooltip
						arrow
						placement='top-start'
						placement='top'
						open={stateRev}
						onOpen={() => setStateRev(true)}
						onClose={() => setStateRev(false)}
						title={rev[1]}
					>
					<span></span>
					</Tooltip>
					<AiOutlineInfoCircle onClick={() => setStateRev(!stateRev)}/> 
					</h4>
					<div className='input'>
					<input  name={props.data[1].name} id={props.data[1].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[1].value}/>
					</div>
				</div>

				<div className='container'>
					<li className = "bp3"></li> 
					<h4 className='left'> {props.data[2].name} 
					<Tooltip
						arrow
						placement='top-start'
						placement='top'
						open={tuitionRev}
						onOpen={() => setTuitionRev(true)}
						onClose={() => setTuitionRev(false)}
						title={rev[2]}
					>
					<span></span>
					</Tooltip>
					<AiOutlineInfoCircle onClick={() => setTuitionRev(!tuitionRev)}/> 
					</h4>
					<div className='input'>
					<input  name={props.data[2].name} id={props.data[2].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[2].value}/>
					</div>
				</div>

				<div className='container'>
					<li className = "bp4"></li> 
					<h4 className='left'> {props.data[3].name} 
					<Tooltip
						arrow
						placement='top-start'
						placement='top'
						open={feesRev}
						onOpen={() => setFeesRev(true)}
						onClose={() => setFeesRev(false)}
						title={rev[3]}
					>
					<span></span>
					</Tooltip>
					<AiOutlineInfoCircle onClick={() => setFeesRev(!feesRev)}/> 
					</h4>
					<div className='input'>
					<input  name={props.data[3].name} id={props.data[3].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[3].value}/>
					</div>
				</div>

				<div className='container'>
					<li className = "bp5"></li>
					<h4 className='left'> {props.data[4].name} 
					<Tooltip
						arrow
						placement='top-start'
						placement='top'
						open={grantsRev}
						onOpen={() => setGrantsRev(true)}
						onClose={() => setGrantsRev(false)}
						title={rev[4]}
					>
					<span></span>
					</Tooltip>
					<AiOutlineInfoCircle onClick={() => setGrantsRev(!grantsRev)}/> 
					</h4>
					<div className='input'>
					<input  name={props.data[4].name} id={props.data[4].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[4].value}/>
					</div>
				</div>

				<div className='container'>
					<li className = "bp6"></li> 
					<h4 className='left'> {props.data[5].name}
					<Tooltip
						arrow
						placement='top-start'
						placement='top'
						open={salesRev}
						onOpen={() => setSalesRev(true)}
						onClose={() => setSalesRev(false)}
						title={rev[5]}
					>
					<span></span>
					</Tooltip>
					<AiOutlineInfoCircle onClick={() => setSalesRev(!salesRev)}/>  
					</h4>
					<div className='input'>
					<input  name={props.data[5].name} id={props.data[5].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[5].value}/>
					</div>
				</div>

				<div className='container'>
					<li className = "bp7"></li> 
					<h4 className='left'> {props.data[6].name} 
					<Tooltip
						arrow
						placement='top-start'
						placement='top'
						open={giftsRev}
						onOpen={() => setGiftsRev(true)}
						onClose={() => setGiftsRev(false)}
						title={rev[6]}
					>
					<span></span>
					</Tooltip>
					<AiOutlineInfoCircle onClick={() => setGiftsRev(!giftsRev)}/> 
					</h4>
					<div className='input'>
					<input  name={props.data[6].name} id={props.data[6].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[6].value}/>
					</div>
				</div>

				<div className='container'>
					<li className = "bp8"></li> 
					<h4 className='left'> {props.data[7].name} <AiOutlineInfoCircle/></h4>
					<div className='input'>
					<input  name={props.data[7].name} id={props.data[7].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[7].value}/>
					</div>
				</div>

				<div className='container'> 
					<h4 className='left'>  </h4>
					<div className='input'>
					<input disabled placeholder='0%' className='large' value={findSum('')}/>
					</div>
				</div>
			</div>
		);
	}
	
	else {
		return (
		<div>
			<div  className='main-container'> 
				<h4 className='left'> Function </h4>
				<h4 className='right'> Percentage(%) </h4>
			</div> 

			<div ref={node} className='container'>
				<li className = "bp1"></li>
				<h4 className='left'> {props.data[0].name} 
				<Tooltip
						arrow
						placement='top-start'
						placement='top'
						open={medExp}
						onOpen={() => setMedExp(true)}
						onClose={() => setMedExp(false)}
						title={exp[0]}
					>
					<span></span>
					</Tooltip>
					<AiOutlineInfoCircle onClick={() => setMedExp(!medExp)}/>
				</h4>
				<div className='input'>
				<input  name={props.data[0].name} id={props.data[0].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[0].value}/>
				</div>
			</div>

			<div className='container'> 
				<li className = "bp2"></li>
				<h4 className='left'> {props.data[1].name}
				<Tooltip
						arrow
						placement='top-start'
						placement='top'
						open={instructionExp}
						onOpen={() => setInstructionExp(true)}
						onClose={() => setInstructionExp(false)}
						title={exp[1]}
					>
					<span> </span>
					</Tooltip>
					<AiOutlineInfoCircle onClick={() => setInstructionExp(!instructionExp)}/>
				</h4>
				<div className='input'>
				<input  name={props.data[1].name} id={props.data[1].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[1].value}/>
				</div>
			</div>

			<div className='container'>
				<li className = "bp3"></li> 
				<h4 className='left'> {props.data[2].name}
				<Tooltip
						arrow
						placement='top-start'
						placement='top'
						open={researchExp}
						onOpen={() => setResExp(true)}
						onClose={() => setResExp(false)}
						title={exp[2]}
					>
					<span> </span>
					</Tooltip>
					<AiOutlineInfoCircle onClick={() => setResExp(!researchExp)}/>
				</h4>
				<div className='input'>
				<input  name={props.data[2].name} id={props.data[2].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[2].value}/>
				</div>
			</div>

			<div className='container'>
				<li className = "bp4"></li> 
				<h4 className='left'> {props.data[3].name}
				<Tooltip
						arrow
						placement='top-start'
						placement='top'
						open={servicesExp}
						onOpen={() => setServicesExp(true)}
						onClose={() => setServicesExp(false)}
						title={exp[3]}
					>
					<span> </span>
					</Tooltip>
					<AiOutlineInfoCircle onClick={() => setServicesExp(!servicesExp)}/>
				</h4>
				<div className='input'>
				<input  name={props.data[3].name} id={props.data[3].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[3].value}/>
				</div>
			</div>

			<div className='container'>
				<li className = "bp5"></li>
				<h4 className='left'> {props.data[4].name}
				<Tooltip
						arrow
						placement='top-start'
						placement='top'
						open={deprExp}
						onOpen={() => setDeprExp(true)}
						onClose={() => setDeprExp(false)}
						title={exp[4]}
					>
					<span> </span>
					</Tooltip>
					<AiOutlineInfoCircle onClick={() => setDeprExp(!deprExp)}/>
				</h4>
				<div className='input'>
				<input  name={props.data[4].name} id={props.data[4].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[4].value}/>
				</div>
			</div>

			<div className='container'>
				<li className = "bp6"></li> 
				<h4 className='left'> {props.data[5].name} 
				<Tooltip
						arrow
						placement='top-start'
						placement='top'
						open={insitutionExp}
						onOpen={() => setInstiExp(true)}
						onClose={() => setInstiExp(false)}
						title={exp[5]}
					>
					<span> </span>
					</Tooltip>
					<AiOutlineInfoCircle onClick={() => setInstiExp(!insitutionExp)}/>
				</h4>
				<div className='input'>
				<input  name={props.data[5].name} id={props.data[5].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[5].value}/>
				</div>
			</div>

			<div className='container'>
				<li className = "bp7"></li> 
				<h4 className='left'> {props.data[6].name} <AiOutlineInfoCircle/></h4>
				<div className='input'>
				<input  name={props.data[6].name} id={props.data[6].name} onChange={updateValue} placeholder='0%' className='large' value={props.data[6].value}/>
				</div>
			</div>

			<div className='container'> 
				<h4 className='left'>  </h4>
				<div className='input'>
				<input disabled placeholder='0%' className='large' value={findSum('')}/>
				</div>
			</div>
		</div>
	);
	}
}

export default InputForm;